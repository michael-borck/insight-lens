"""
**What the code does:**

1.  **Setup:** It initializes a `fasthtml` web application (`app`, `rt`) with debugging enabled.
2.  **Database:** It sets up an in-memory SQLite database (`db = database(":memory:")`) and defines a table named `clients` with columns for `id` (primary key), `name`, `str`, `address`, and `email`. It also creates a `dataclass` `Client` based on this table structure for easier data handling.
3.  **UI Components (HTML Generation):**
    * `create_form`: Creates an empty HTML `<form>` element configured to submit data via POST using HTMX.
    * `create_row`: Creates a table header row (`<tr>`) containing input fields (`<input>`) for adding a *new* client. These inputs are linked to the `create_form`. It uses `hx_swap_oob="true"` which suggests this row gets replaced out-of-band after a successful submission (likely to clear the form fields).
    * `client_cell`: Generates a table data cell (`<td>`). This function is crucial for the inline editing feature.
        * In its *initial state* (`edit=False`), it displays the client data (e.g., name). Clicking the cell (`hx_trigger="click"`) sends a POST request to `/swap/...` to switch it to edit mode.
        * In its *edit state* (`edit=True`), it displays an `<input>` field containing the current value. Pressing Enter or changing the value (`hx_trigger="keyup[key=='Enter'] changed"`) sends a POST request to `/update/...` to save the change. Pressing Escape (`hx_trigger="keyup[key=='Escape']"`) sends a POST request to `/reset/...` to cancel the edit and revert to the initial state.
    * `client_row`: Creates a table row (`<tr>`) for an *existing* client, displaying its ID, calling `client_cell` for name, address, and email (making them editable), and adding a "Delete" button with HTMX attributes for confirmation and deletion.
    * `client_table`: Assembles the complete HTML `<table>`, including the header row (with the "add client" inputs from `create_row`) and the table body populated with rows for existing clients (generated by mapping `client_row` over the data from the `clients` table).
4.  **Web Routes (Endpoints):**
    * `GET /`: Displays the main page, showing the title "Clients" and the `client_table`.
    * `POST /`: Handles the submission of the "add client" form. It inserts the new client into the database and returns two HTML fragments via HTMX: the new `client_row` (to be appended to the table) and a fresh `create_row` (to replace the old one, likely clearing the inputs).
    * `POST /swap/{client_id}/{column_name}`: Triggered when a cell is clicked. Returns the HTML for that cell in *edit mode*.
    * `POST /update/{client_id}/{column_name}`: Triggered when an edit is submitted (Enter/change). Updates the client record in the database and returns the HTML for that cell in its *initial state* (displaying the updated value).
    * `POST /reset/{client_id}/{column_name}`: Triggered when an edit is cancelled (Escape). Returns the HTML for that cell in its *initial state* (displaying the original value).
    * `DELETE /{client_id}`: Triggered by the "Delete" button. Removes the client from the database. HTMX handles removing the corresponding row from the table on the frontend.
5.  **Server:** `serve()` starts the web server.

**In summary:** This code creates a single-page web application demonstrating a CRUD (Create, Read, Update, Delete) interface for managing client data. It uses `fasthtml` for the backend and web framework, and heavily leverages HTMX to provide dynamic, inline editing and updates within an HTML table without full page reloads.
"""


from fasthtml.common import *

app, rt = fast_app(debug=True)

db = database(":memory:")
clients = db.t.clients

if clients not in db.t:
    clients.create(id=int, name=str, address=str, email=str, pk='id')

Client = clients.dataclass()


def create_form():
    return Form(id="create-form", hx_post="/", hx_target="#client-list", hx_swap="beforeend")


def create_row():
    return Tr(
        Th("Add"),
        Th(Input(name="name", type="text", placeholder="Name", form="create-form")),
        Th(Input(name="address", type="text",
           placeholder="Address", form="create-form")),
        Th(Input(name="email", type="email", placeholder="Email", form="create-form")),
        Th(Input(type="submit", value="Add", form="create-form")),
        id="create-row", hx_swap_oob="true"
    )


def client_cell(client_id: int, column_name: str, column_value: str, edit: bool = False):
    cell_id = f"client-{client_id}-{column_name}"
    attributes = {
        "id": cell_id,
        "hx_swap": "outerHTML",
        "hx_vals": {'pre_value': column_value},
    }
    if edit:
        # table cell after user clicks on it - Edit State
        inner_html = Input(name=column_name,
                           value=column_value,
                           type="email" if column_name == "email" else "text",
                           hx_post=f"/update/{client_id}/{column_name}",
                           target_id=cell_id,
                           hx_swap="outerHTML",
                           hx_trigger="keyup[key=='Enter'] changed",
                           )
        attributes["hx_trigger"] = "keyup[key=='Escape']"
        attributes["hx_post"] = f"/reset/{client_id}/{column_name}"
    else:
        # table cell in its Initial State
        inner_html = column_value
        attributes["hx_trigger"] = "click"
        attributes["hx_post"] = f"/swap/{client_id}/{column_name}"
    return Td(inner_html, **attributes)


def client_row(client: Client):
    return Tr(
        Td(client.id),
        client_cell(client.id, "name", client.name),
        client_cell(client.id, "address", client.address),
        client_cell(client.id, "email", client.email),
        Td(
            Button("Delete",
                   hx_delete=f"/{client.id}",
                   hx_confirm="Are you sure?",
                   hx_swap="outerHTML",
                   target_id=f"client-{client.id}"
                   ),
        ),
        id=f"client-{client.id}"
    )


def client_table():
    return Table(
        Thead(
            Tr(
                Th("ID", scope="col"),
                Th("Name", scope="col"),
                Th("Address", scope="col"),
                Th("Email", scope="col"),
                Th("Action", scope="col")
            ),
            create_row()
        ),
        Tbody(
            map(client_row, clients()), id="client-list"
        )
    )


@rt("/")
def get():
    return Titled("Clients", create_form(), client_table())


@rt("/")
def post(client: Client):
    new_client = clients.insert(client)
    return client_row(new_client), create_row()


@ rt("/swap/{client_id:int}/{column_name:str}")
def post(client_id: int, column_name: str, pre_value: str):
    # table cell after user clicks on it - Edit State
    return client_cell(client_id, column_name, pre_value, edit=True)


@ rt("/update/{client_id:int}/{column_name:str}")
def post(client_id: int, column_name: str, client: Client):
    client.id = client_id
    client = clients.update(client)
    # table cell in its Initial State
    return client_cell(client_id, column_name, getattr(client, column_name))


@ rt("/reset/{client_id:int}/{column_name:str}")
def post(client_id: int, column_name: str, pre_value: str):
    # table cell in its Initial State
    return client_cell(client_id, column_name, pre_value)


@ rt("/{client_id:int}")
def delete(client_id: int):
    clients.delete(client_id)
    return


serve()
