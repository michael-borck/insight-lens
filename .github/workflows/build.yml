name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: linux
            runner: ubuntu-latest
            arch: x64
          - name: mac
            runner: macos-latest
            arch: x64
          - name: mac-arm64
            runner: macos-latest
            arch: arm64
          - name: windows
            runner: windows-latest
            arch: x64

    runs-on: ${{ matrix.runner }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript and React
        run: npm run build:main && npm run build:renderer

      # macOS Code Signing (optional)
      - name: Prepare for macOS notarization
        if: startsWith(matrix.runner, 'macos')
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Setting up macOS signing environment..."
          # Certificate setup will be handled by electron-builder if secrets are present

      # Build Electron app
      - name: Build Electron App
        env:
          # macOS signing
          CSC_LINK: ${{ secrets.APPLE_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # Windows signing (optional)
          WIN_CSC_LINK: ${{ secrets.WINDOWS_CERTIFICATE }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          if [ "${{ matrix.runner }}" == "windows-latest" ]; then
            npm run build:electron -- --win
          elif [ "${{ matrix.runner }}" == "macos-latest" ]; then
            if [ "${{ matrix.arch }}" == "arm64" ]; then
              npm run build:electron -- --mac --arm64
            else
              npm run build:electron -- --mac --x64
            fi
          else
            npm run build:electron -- --linux
          fi
        shell: bash

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ matrix.arch }}
          path: |
            dist-electron/*.exe
            dist-electron/*.dmg
            dist-electron/*.AppImage
            dist-electron/*.deb
            dist-electron/*.rpm
            dist-electron/*.zip
            dist-electron/*.tar.gz

  # MAS (Mac App Store) build
  mas-build:
    runs-on: macos-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript and React
        run: npm run build:main && npm run build:renderer

      - name: Build for Mac App Store
        env:
          CSC_LINK: ${{ secrets.MAS_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MAS_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: npm run build:electron -- --mac mas

      - name: Upload MAS artifact
        uses: actions/upload-artifact@v4
        with:
          name: mas-universal
          path: dist-electron/*.pkg

  # Create GitHub Release
  release:
    needs: [build, mas-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}