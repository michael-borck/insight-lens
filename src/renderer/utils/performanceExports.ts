// Performance report export utilities
import { logger } from './logger';

export interface PerformanceUnit {
  unit_code: string;
  unit_name: string;
  year: number;
  semester: string;
  overall_experience: number;
  response_rate: number;
  discipline_name: string;
  responses?: number;
  enrolments?: number;
}

export interface ExportOptions {
  title: string;
  subtitle?: string;
  includeContactInfo?: boolean;
  customThreshold?: number;
}

// Generate CSV content for performance data
export function generatePerformanceCSV(units: PerformanceUnit[], options: ExportOptions): string {
  const headers = [
    'Unit Code',
    'Unit Name', 
    'Discipline',
    'Semester',
    'Year',
    'Satisfaction Score (%)',
    'Response Rate (%)',
    'Responses',
    'Enrolments'
  ];

  const rows = units.map(unit => [
    unit.unit_code,
    unit.unit_name,
    unit.discipline_name,
    unit.semester,
    unit.year.toString(),
    unit.overall_experience.toFixed(1),
    unit.response_rate.toFixed(1),
    unit.responses?.toString() || 'N/A',
    unit.enrolments?.toString() || 'N/A'
  ]);

  // Add metadata header
  const metadata = [
    [`# ${options.title}`],
    [`Generated: ${new Date().toLocaleDateString()}`],
    [`Total Units: ${units.length}`],
    [''], // Empty row
    headers
  ];

  const allRows = [...metadata, ...rows];
  return allRows.map(row => row.join(',')).join('\n');
}

// Generate markdown report content
export function generatePerformanceMarkdown(units: PerformanceUnit[], options: ExportOptions): string {
  const date = new Date().toLocaleDateString();
  
  let content = `# ${options.title}\n\n`;
  content += `**Generated:** ${date}  \n`;
  content += `**Total Units:** ${units.length}  \n`;
  
  if (options.subtitle) {
    content += `**Criteria:** ${options.subtitle}  \n`;
  }
  
  content += '\n## Summary\n\n';
  
  if (units.length === 0) {
    content += 'No units found matching the specified criteria.\n\n';
    return content;
  }

  // Calculate summary statistics
  const avgSatisfaction = units.reduce((sum, unit) => sum + unit.overall_experience, 0) / units.length;
  const avgResponseRate = units.reduce((sum, unit) => sum + unit.response_rate, 0) / units.length;
  
  content += `- **Average Satisfaction:** ${avgSatisfaction.toFixed(1)}%\n`;
  content += `- **Average Response Rate:** ${avgResponseRate.toFixed(1)}%\n`;
  content += `- **Range:** ${Math.min(...units.map(u => u.overall_experience)).toFixed(1)}% - ${Math.max(...units.map(u => u.overall_experience)).toFixed(1)}%\n\n`;

  // Group by semester for better organization
  const groupedBySemester: { [key: string]: PerformanceUnit[] } = {};
  units.forEach(unit => {
    const key = `${unit.semester} ${unit.year}`;
    if (!groupedBySemester[key]) groupedBySemester[key] = [];
    groupedBySemester[key].push(unit);
  });

  content += '## Detailed Results\n\n';
  
  Object.entries(groupedBySemester)
    .sort(([a], [b]) => b.localeCompare(a)) // Sort by semester/year descending
    .forEach(([period, periodUnits]) => {
      content += `### ${period}\n\n`;
      content += '| Unit Code | Unit Name | Discipline | Satisfaction | Response Rate |\n';
      content += '|-----------|-----------|------------|--------------|---------------|\n';
      
      periodUnits
        .sort((a, b) => b.overall_experience - a.overall_experience) // Sort by satisfaction descending
        .forEach(unit => {
          content += `| ${unit.unit_code} | ${unit.unit_name} | ${unit.discipline_name} | ${unit.overall_experience.toFixed(1)}% | ${unit.response_rate.toFixed(1)}% |\n`;
        });
      
      content += '\n';
    });

  content += '---\n\n';
  content += '*Generated by InsightLens Performance Reports*\n';
  
  return content;
}

// Download file utility
export function downloadFile(content: string, filename: string, mimeType: string): void {
  try {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    logger.info('File downloaded successfully:', filename);
  } catch (error) {
    logger.error('Failed to download file:', error);
    throw new Error('Failed to download file');
  }
}

// Generate filename with timestamp
export function generateFilename(prefix: string, extension: string): string {
  const date = new Date();
  const timestamp = date.toISOString().split('T')[0]; // YYYY-MM-DD format
  return `${prefix}_${timestamp}.${extension}`;
}

// Export star performers to CSV
export function exportStarPerformersCSV(units: PerformanceUnit[]): void {
  const options: ExportOptions = {
    title: 'Star Performers Report (≥85% Satisfaction)',
    subtitle: 'Units with exceptional student satisfaction'
  };
  
  const csv = generatePerformanceCSV(units, options);
  const filename = generateFilename('star_performers', 'csv');
  downloadFile(csv, filename, 'text/csv');
}

// Export units needing attention to CSV
export function exportUnitsNeedingAttentionCSV(units: PerformanceUnit[]): void {
  const options: ExportOptions = {
    title: 'Units Needing Support Report (<70% Satisfaction)',
    subtitle: 'Units requiring attention and support'
  };
  
  const csv = generatePerformanceCSV(units, options);
  const filename = generateFilename('units_needing_support', 'csv');
  downloadFile(csv, filename, 'text/csv');
}

// Export star performers to Markdown
export function exportStarPerformersMarkdown(units: PerformanceUnit[]): void {
  const options: ExportOptions = {
    title: 'Star Performers Report',
    subtitle: 'Units with exceptional student satisfaction (≥85%)'
  };
  
  const markdown = generatePerformanceMarkdown(units, options);
  const filename = generateFilename('star_performers_report', 'md');
  downloadFile(markdown, filename, 'text/markdown');
}

// Export units needing attention to Markdown
export function exportUnitsNeedingAttentionMarkdown(units: PerformanceUnit[]): void {
  const options: ExportOptions = {
    title: 'Units Needing Support Report',
    subtitle: 'Units with lower satisfaction scores (<70%) requiring attention'
  };
  
  const markdown = generatePerformanceMarkdown(units, options);
  const filename = generateFilename('units_needing_support_report', 'md');
  downloadFile(markdown, filename, 'text/markdown');
}