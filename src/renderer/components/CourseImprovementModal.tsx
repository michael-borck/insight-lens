import React, { useState } from 'react';
import { X, Lightbulb, TrendingUp, AlertCircle, CheckCircle, FileDown, Loader } from 'lucide-react';
import { Card } from './Card';
import { Button } from './Button';
import { generateCourseRecommendations } from '../services/aiService';

interface CourseRecommendation {
  category: 'content' | 'delivery' | 'assessment' | 'engagement' | 'support' | 'resources';
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  evidence: string[];
  actionSteps: string[];
  impact: string;
}

interface CourseImprovementModalProps {
  isOpen: boolean;
  onClose: () => void;
  surveyId: number;
  unitCode: string;
  unitName: string;
  semester: string;
  year: number;
}

const categoryIcons = {
  content: 'üìö',
  delivery: 'üéØ',
  assessment: 'üìù',
  engagement: 'ü§ù',
  support: 'üí°',
  resources: 'üõ†Ô∏è'
};

const categoryColors = {
  content: 'bg-blue-50 text-blue-700 border-blue-200',
  delivery: 'bg-green-50 text-green-700 border-green-200',
  assessment: 'bg-purple-50 text-purple-700 border-purple-200',
  engagement: 'bg-orange-50 text-orange-700 border-orange-200',
  support: 'bg-indigo-50 text-indigo-700 border-indigo-200',
  resources: 'bg-teal-50 text-teal-700 border-teal-200'
};

const priorityColors = {
  high: 'bg-red-100 text-red-800 border-red-300',
  medium: 'bg-yellow-100 text-yellow-800 border-yellow-300',
  low: 'bg-gray-100 text-gray-800 border-gray-300'
};

export function CourseImprovementModal({ 
  isOpen, 
  onClose, 
  surveyId, 
  unitCode, 
  unitName,
  semester,
  year 
}: CourseImprovementModalProps) {
  const [recommendations, setRecommendations] = useState<CourseRecommendation[]>([]);
  const [summary, setSummary] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [hasGenerated, setHasGenerated] = useState(false);

  const handleGenerate = async () => {
    setIsLoading(true);
    setError('');
    
    try {
      const result = await generateCourseRecommendations(surveyId);
      
      if (result.success) {
        setRecommendations(result.recommendations || []);
        setSummary(result.summary || '');
        setHasGenerated(true);
      } else {
        setError(result.error || 'Failed to generate recommendations');
      }
    } catch (err) {
      setError('An unexpected error occurred. Please try again.');
      console.error('Recommendation generation error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleExport = () => {
    const content = generateReportContent();
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${unitCode}_${semester}${year}_improvement_recommendations.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generateReportContent = () => {
    const date = new Date().toLocaleDateString();
    
    return `# Course Improvement Recommendations

**Unit:** ${unitCode} - ${unitName}  
**Period:** ${semester} ${year}  
**Generated:** ${date}

## Summary

${summary}

## Recommendations

${recommendations.map((rec, index) => `
### ${index + 1}. ${rec.title}

**Category:** ${rec.category.charAt(0).toUpperCase() + rec.category.slice(1)}  
**Priority:** ${rec.priority.charAt(0).toUpperCase() + rec.priority.slice(1)}

**Description:**
${rec.description}

**Evidence:**
${rec.evidence.map(e => `- ${e}`).join('\n')}

**Action Steps:**
${rec.actionSteps.map((step, i) => `${i + 1}. ${step}`).join('\n')}

**Expected Impact:**
${rec.impact}

---
`).join('')}

*Generated by InsightLens AI Course Improvement Assistant*
`;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-6xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center gap-3">
            <Lightbulb className="w-6 h-6 text-primary-600" />
            <div>
              <h2 className="text-xl font-semibold text-gray-900">
                Course Improvement Recommendations
              </h2>
              <p className="text-sm text-gray-500">
                {unitCode} - {unitName} ‚Ä¢ {semester} {year}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {hasGenerated && recommendations.length > 0 && (
              <Button
                onClick={handleExport}
                variant="secondary"
                size="sm"
                className="flex items-center gap-2"
              >
                <FileDown className="w-4 h-4" />
                Export Report
              </Button>
            )}
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          {!hasGenerated && !isLoading && (
            <div className="text-center py-12">
              <TrendingUp className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Generate AI-Powered Recommendations
              </h3>
              <p className="text-gray-500 mb-6 max-w-md mx-auto">
                Analyze this survey data to get personalized recommendations for improving 
                course delivery, content, and student engagement.
              </p>
              <Button onClick={handleGenerate} size="lg">
                Generate Recommendations
              </Button>
            </div>
          )}

          {isLoading && (
            <div className="text-center py-12">
              <Loader className="w-12 h-12 text-primary-600 mx-auto mb-4 animate-spin" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Analyzing Survey Data...
              </h3>
              <p className="text-gray-500">
                Our AI is reviewing the survey results, comments, and benchmarks to generate 
                personalized improvement recommendations.
              </p>
            </div>
          )}

          {error && (
            <div className="text-center py-12">
              <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Generation Failed
              </h3>
              <p className="text-red-600 mb-4">{error}</p>
              <Button onClick={handleGenerate} variant="secondary">
                Try Again
              </Button>
            </div>
          )}

          {hasGenerated && recommendations.length > 0 && (
            <div className="space-y-6">
              {/* Summary */}
              {summary && (
                <Card className="p-6 bg-primary-50 border-primary-200">
                  <h3 className="text-lg font-medium text-gray-900 mb-3 flex items-center gap-2">
                    <CheckCircle className="w-5 h-5 text-primary-600" />
                    Executive Summary
                  </h3>
                  <p className="text-gray-700 leading-relaxed">{summary}</p>
                </Card>
              )}

              {/* Recommendations */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900">
                  Recommendations ({recommendations.length})
                </h3>
                
                {recommendations.map((recommendation, index) => (
                  <Card key={index} className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <span className="text-2xl">{categoryIcons[recommendation.category]}</span>
                        <div>
                          <h4 className="text-lg font-medium text-gray-900">
                            {recommendation.title}
                          </h4>
                          <div className="flex items-center gap-2 mt-1">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${categoryColors[recommendation.category]}`}>
                              {recommendation.category}
                            </span>
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${priorityColors[recommendation.priority]}`}>
                              {recommendation.priority} priority
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="space-y-4">
                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">Description</h5>
                        <p className="text-gray-700 text-sm leading-relaxed">
                          {recommendation.description}
                        </p>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">Evidence</h5>
                        <ul className="space-y-1">
                          {recommendation.evidence.map((evidence, evidenceIndex) => (
                            <li key={evidenceIndex} className="text-sm text-gray-600 flex items-start gap-2">
                              <span className="text-primary-500 mt-1">‚Ä¢</span>
                              <span>{evidence}</span>
                            </li>
                          ))}
                        </ul>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">Action Steps</h5>
                        <ol className="space-y-1">
                          {recommendation.actionSteps.map((step, stepIndex) => (
                            <li key={stepIndex} className="text-sm text-gray-600 flex items-start gap-2">
                              <span className="text-primary-500 font-medium mt-0.5">{stepIndex + 1}.</span>
                              <span>{step}</span>
                            </li>
                          ))}
                        </ol>
                      </div>

                      <div>
                        <h5 className="text-sm font-medium text-gray-900 mb-2">Expected Impact</h5>
                        <p className="text-sm text-gray-600 leading-relaxed">
                          {recommendation.impact}
                        </p>
                      </div>
                    </div>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}